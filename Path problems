{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "97f5768a",
   "metadata": {},
   "source": [
    "1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3090a885",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[WinError 3] Системе не удается найти указанный путь: 'sdf'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 6\u001b[0m\n\u001b[0;32m      3\u001b[0m path \u001b[38;5;241m=\u001b[39m Path(\u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124menter your path: \u001b[39m\u001b[38;5;124m\"\u001b[39m))\n\u001b[0;32m      5\u001b[0m directories \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m----> 6\u001b[0m \u001b[38;5;28mall\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43miterdir\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m      7\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m item \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mall\u001b[39m:\n\u001b[0;32m      8\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m item\u001b[38;5;241m.\u001b[39mis_dir():\n",
      "File \u001b[1;32mc:\\Users\\amirs\\AppData\\Local\\Programs\\Python\\Python310\\lib\\pathlib.py:1017\u001b[0m, in \u001b[0;36mPath.iterdir\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1013\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21miterdir\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[0;32m   1014\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Iterate over the files in this directory.  Does not yield any\u001b[39;00m\n\u001b[0;32m   1015\u001b[0m \u001b[38;5;124;03m    result for the special paths '.' and '..'.\u001b[39;00m\n\u001b[0;32m   1016\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m-> 1017\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m name \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_accessor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlistdir\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m)\u001b[49m:\n\u001b[0;32m   1018\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01min\u001b[39;00m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m..\u001b[39m\u001b[38;5;124m'\u001b[39m}:\n\u001b[0;32m   1019\u001b[0m             \u001b[38;5;66;03m# Yielding a path object for these makes little sense\u001b[39;00m\n\u001b[0;32m   1020\u001b[0m             \u001b[38;5;28;01mcontinue\u001b[39;00m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [WinError 3] Системе не удается найти указанный путь: 'sdf'"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "path = Path(input(\"enter your path: \"))\n",
    "\n",
    "directories = []\n",
    "all = list(path.iterdir())\n",
    "for item in all:\n",
    "    if item.is_dir():\n",
    "        directories.append(item)\n",
    "files = []\n",
    "for item in all:\n",
    "    if item.is_file():\n",
    "        files.append(item)\n",
    "print(f\"directories: \\n {directories} \\n files: \\n {files}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ee6c7bc",
   "metadata": {},
   "source": [
    "2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cannot test anything because path doesnt exist\n"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "import os\n",
    "\n",
    "path = Path(input(\"enter ur path: \"))\n",
    "\n",
    "if path.exists():\n",
    "    path_str = str(path)\n",
    "    if os.access(path_str, os.R_OK):\n",
    "        print(\"Reading is working good\\n\")\n",
    "    else: \n",
    "        print(\"Reading is working not good\")\n",
    "    if os.access(path_str, os.W_OK):\n",
    "        print(\"Writing is working good\\n\")\n",
    "    else: \n",
    "        print(\"Writing is working not good\\n\")\n",
    "    if os.access(path_str, os.X_OK):\n",
    "        print(\"Existence is working good\\n\")\n",
    "    else: \n",
    "        print(\"Existence is working not good\")\n",
    "else:\n",
    "    print(\"cannot test anything because path doesnt exist\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca173f11",
   "metadata": {},
   "source": [
    "3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be9ae4c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from pathlib import Path\n",
    "\n",
    "path = Path(input(\"enter a path: \"))\n",
    "\n",
    "if path.exists():\n",
    "    print(f\"name of the file: {path.name}\\n\")\n",
    "    print(f\"name of the portion directory: {path.parent}\")\n",
    "else:\n",
    "    print(\"path doesnt exist\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "077bcc9e",
   "metadata": {},
   "source": [
    "4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9465a4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open(\"hello.txt\", \"r\")\n",
    "count = 0\n",
    "for i in f:\n",
    "    count+=1\n",
    "f.close()\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4840d4f",
   "metadata": {},
   "source": [
    "5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80de7ea0",
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open(\"hello.txt\", \"a\")\n",
    "lst = [\"yeah im a list\"]\n",
    "f.write(f\"\\nnow u have list {lst}\")\n",
    "f.close()\n",
    "\n",
    "f = open(\"hello.txt\", \"r\")\n",
    "lines = f.readlines()\n",
    "f.close()\n",
    "\"\"\"\n",
    "new = []\n",
    "for line in lines:\n",
    "    if \"now u have list\" not in line:\n",
    "        new.append(line)\n",
    "\n",
    "f = open(\"hello.txt\", \"w\")\n",
    "f.writelines(new)\n",
    "f.close()\n",
    "\"\"\"\n",
    "f = open(\"hello.txt\", 'r')\n",
    "print (f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a27650ba",
   "metadata": {},
   "source": [
    "6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b12c6ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "import string\n",
    "import os\n",
    "for _ in list(string.ascii_uppercase):\n",
    "    f = open(f\"{_}.txt\", 'x') "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79fdc37a",
   "metadata": {},
   "source": [
    "7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cfb9e1ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open(\"hello.txt\", 'r')\n",
    "text = f.read()\n",
    "f.close()\n",
    "f1 = open(\"new.txt\", 'w')\n",
    "f1.write(text)\n",
    "f1.close()\n",
    "f1 = open(\"new.txt\", \"r\")\n",
    "print(f1.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb182874",
   "metadata": {},
   "source": [
    "8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61fb62b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "import os\n",
    "\n",
    "path = Path(input(\"enter path of ur file: \"))\n",
    "\n",
    "if os.path.exists(path) and os.access(path, os.W_OK) and os.access(path, os.R_OK):\n",
    "    os.remove(path)\n",
    "else:\n",
    "    print(\"u dont have access or this file doesnt exist\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
